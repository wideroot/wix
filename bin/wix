#!/usr/bin/env ruby

# TODO do not use Pathname

require 'fileutils'
require 'open3'
require 'shellwords'
require 'json'
require 'logger'
require 'digest/sha1'
require 'net/http'
require 'uri'
require 'io/console'
require 'wix'

require 'gli'
include GLI::App

program_desc 'wix client'

version Wix::VERSION

subcommand_option_handling :normal
arguments :strict


desc "Show verbose output"
default_value false
switch [:v, :verbose], :negatable => false


desc "Create a empty local sub index"
command :init do |c|
  c.desc "Private name of the index"
  c.flag [:name]
  c.default_value nil
  c.desc "Public name of the index"
  c.flag [:display_name]
  c.default_value nil
  c.desc "User"
  c.flag [:user]
  c.default_value nil
  c.desc "The index (and files) will not be associate to the user"
  c.default_value false
  c.switch %i(anon), negatable: true
  c.desc "Other users will not see this index (they will only see the files)"
  c.default_value false
  c.switch %i(hidden), negatable: true
  c.desc "Upload filenames"
  c.default_value true
  c.switch %i(filename), negatable: true
  c.desc "Upload resource identifiers"
  c.default_value true
  c.switch %i(resource_identifier), negatable: true
  c.desc "Upload commit times"
  c.default_value true
  c.switch %i(commit-time), negatable: true
  c.desc "Upload file times (mtime)"
  c.default_value true
  c.switch %i(file-time), negatable: true
  c.desc "Show push time to other users"
  c.default_value true
  c.switch %i(push-time), negatable: true
  c.desc "Other users will see your commit messages"
  c.default_value true
  c.switch %i(message), negatable: true
  c.desc "Force all files to be just notified (i.e. marking all files as removed)."
  c.default_value false
  c.switch %i(notification), negatable: false

  c.action do |global_options, options, args|
    pwd = Dir.pwd
    if init_wix(pwd)
      fail "A local sub index cannot be placed inside another local sub index `#{$wix_root}'."
    end
    fail "User cannot be none." if options['user'] == nil
    fail "Name cannot be none." if options['name'] == nil
    fail "Display name cannot be none." if options['display_name'] == nil
    create_wix(pwd, options)
    puts "Created sub local index at `#{$wix_root}'."
  end
end


def arg_command args, add_root_if_empty: false, force_file_to_exist: false
  pwd = Dir.pwd
  init_wix!(pwd)
  args << $wix_root if args.empty? && add_root_if_empty
  base = Pathname.new($wix_root)
  paths = args.map do |path|
    p = Pathname.new(File.absolute_path(path))
    if p.relative_path_from(base).to_s.start_with?('..')
      fail "`#{path}' is outside local sub index `#{$wix_root}'"
    end
    if force_file_to_exist
      if !File.file?(path) && !Dir.exists?(path)
        fail "path `#{path}' did not match any file"
      end
    end
    p
  end
  [base, paths]
end

desc "Add entry to the index"
arg_name 'path', [:optional, :multiple]
command :add do |c|
  c.desc "Update the index just where it already has an entry matching <path>."
  c.default_value false
  c.switch [:u, :update], negatable: false
  c.desc "Update the index not only where the working tree has a file matching <path> but also where the index already has an entry."
  c.default_value false
  c.switch [:A, :all]
  c.desc "Update the index by adding new files that are unknown to the index and files modified in the local sub index, but ignore files that have been removed from the local sub index."
  c.default_value false
  c.switch %i(no-all)
  c.action do |global_options, options, args|
    if options['all'] && options['update']
      fail "-A and -u are mutually incompatible"
    end

    base, paths = arg_command(args, force_file_to_exist: true)
    if paths.empty?
      if options['update'] || options['all']
        paths << Pathname.new(File.absolute_path($wix_root))
      else
        puts "Nothing specified, nothing added."
      end
    end

    if !(options['all'] || options['update'])
      options['all'] = true
    end

    stage = stage_commit
    paths.each do |path|
      add(path, base, stage, options)
    end
  end
end

desc "Remove (and untrack) entry from the index (not removing the files)"
arg_name 'path', [:multiple]
command :rm do |c|
  c.desc "Remove also not tracked entries."
  c.default_value false
  c.switch [:f, :force], negatable: false
  c.desc "Remove not tracked entries, but notifying."
  c.default_value false
  c.switch [:n, :notify], negatable: false
  c.action do |global_options, options, args|
    help_now! "Too few arguments for command" if args.empty?
    base, paths = arg_command(args, add_root_if_empty: true)
    stage = stage_commit
    rm_paths(paths, base, stage, options)
  end
end

desc "Update server local sub index"
arg_name 'path', [:optional, :multiple]
command :status do |c|
  c.action do |global_options, options, args|
    base, paths = arg_command(args, add_root_if_empty: true)
    stage = stage_commit
    staged = Hash.new { |h,k| h[k] = {} }
    not_staged = {}
    untracked = {}

    paths.each do |path|
      status(path, base, stage, staged, not_staged, untracked)
    end


    # TODO refactor
    puts "Files to be committed:"
    if !staged.empty?
      puts ""
      staged.each do |path, objects|
        objects.each do |object_id, o|
          object = o[:object]
          action = o[:action]
          action_msg = case action
            when 'n'; 'notify:  '
            when 'r'; 'deleted: '
            when 'a'; 'added:   '
            else    ;  fail "Invalid action `#{action}' for staged file."
            end
          puts "    #{action_msg} #{path}   ##{object.id}"
        end
      end
      puts ""
    end

    puts "Files not staged for commit:"
    if !not_staged.empty?
      puts ""
      not_staged.each do |path, o|
        object = o[:object]
        action = o[:action]
        action_msg = case action
            when 'r'; 'deleted: '
            when 'm'; 'modified:'
            else    ; fail "Invalid action `#{action}' for staged file."
            end
        if action == 'r'
          puts "    #{action_msg} #{path}   ##{object.id}"
        else
          puts "    #{action_msg} #{path}"
        end
      end
      puts ""
    end

    puts "Untracked files:"
    if !untracked.empty?
      puts ""
                #'modified:'
      untracked.each do |path, action|
        puts "    #{path}"
      end
      puts ""
    end
  end
end


desc "Record changes to the index"
command :commit do |c|
  c.desc "Use the given <msg> as the commit message."
  c.default_value nil
  c.flag [:m, :message]
  c.action do |global_options, options, args|
    pwd = Dir.pwd
    init_wix!(pwd)
    commit(options['message'])
  end
end

desc "Update remote sub local index"
command :push do |c|
  c.action do |global_options, options, args|
    pwd = Dir.pwd
    init_wix!(pwd)
    push
  end
end


desc "Show the local sub index status"
arg_name 'commits', [:optional, :multiple]
command :debug do |c|
  c.action do |global_options, options, args|
    pwd = Dir.pwd
    init_wix!(pwd)
    commits = if args.empty?
      Wix::Commit.all
    else
      Wix::Commit.where(id: args).all
    end
    commits.each do |commit|
      puts "# r#{commit.id}"
      puts ""
      last_path = nil
      objects = Wix::Object
        .where(commit_id: commit.id)
        .order_by(:path, Sequel.desc(:id))
        .all
      .each do |object|
        puts object.path if last_path != object.path
        puts "  #{'r' if object.removed}#{'a' if object.added} ##{object.id}"
        if $verbose_level > 0
          puts "      mtime    #{object.mtime}"
          puts "      ctime    #{object.ctime}"
          puts "      size     #{object.size}"
          puts "      sha2_512 #{object.sha2_512}"
        end
        last_path = object.path
      end
      puts ""
      puts ""
    end
  end
end

# TODO
# rm-notifications  idem than rm, but removing notification of all files
# rm-objects        remove objects id



pre do |global,command,options,args|
  $verbose_level = global[:verbose] ? 1 : 0
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
